{
  "name": "Salesforce Lead Source to SalesLoft Cadence Router",
  "nodes": [
    {
      "parameters": {
        "resource": "query",
        "query": "SELECT Id, FirstName, LastName, Email, Phone, Company, Title, Lead_Source_Most_Recent__c, Status, Rating, CreatedDate, LastModifiedDate FROM Lead WHERE OwnerId = '{{$credentials.userId}}' AND Status != 'Converted' AND Email != null AND Lead_Source_Most_Recent__c != null ORDER BY CreatedDate DESC LIMIT 100"
      },
      "id": "1",
      "name": "Get My Leads",
      "type": "nodes-base.salesforce",
      "typeVersion": 1,
      "position": [250, 300],
      "credentials": {
        "salesforceOAuth2Api": {
          "id": "1",
          "name": "Salesforce OAuth2"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "2",
      "name": "Process Each Lead",
      "type": "nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "// Map Lead Source Most Recent to SalesLoft Cadences\nconst lead = $input.item.json;\n\n// Define your lead source to cadence mapping\n// IMPORTANT: Update these cadence IDs with your actual SalesLoft cadence IDs\nconst leadSourceToCadence = {\n  // Inbound sources\n  'Website': { \n    cadenceId: 12345, \n    cadenceName: 'Inbound - Website Inquiry',\n    priority: 'high'\n  },\n  'Demo Request': { \n    cadenceId: 12346, \n    cadenceName: 'Inbound - Demo Request',\n    priority: 'high'\n  },\n  'Contact Us': { \n    cadenceId: 12347, \n    cadenceName: 'Inbound - Contact Form',\n    priority: 'high'\n  },\n  'Webinar': { \n    cadenceId: 12348, \n    cadenceName: 'Webinar Follow-up',\n    priority: 'medium'\n  },\n  \n  // Outbound sources\n  'LinkedIn': { \n    cadenceId: 12349, \n    cadenceName: 'LinkedIn Outreach',\n    priority: 'medium'\n  },\n  'Cold Outreach': { \n    cadenceId: 12350, \n    cadenceName: 'Cold Outbound',\n    priority: 'low'\n  },\n  'List Import': { \n    cadenceId: 12351, \n    cadenceName: 'Targeted List Outreach',\n    priority: 'medium'\n  },\n  \n  // Partner/Referral sources\n  'Partner Referral': { \n    cadenceId: 12352, \n    cadenceName: 'Partner Referral Follow-up',\n    priority: 'high'\n  },\n  'Customer Referral': { \n    cadenceId: 12353, \n    cadenceName: 'Customer Referral Follow-up',\n    priority: 'high'\n  },\n  \n  // Event sources\n  'Trade Show': { \n    cadenceId: 12354, \n    cadenceName: 'Trade Show Follow-up',\n    priority: 'medium'\n  },\n  'Conference': { \n    cadenceId: 12355, \n    cadenceName: 'Conference Follow-up',\n    priority: 'medium'\n  },\n  \n  // Default fallback\n  'Other': { \n    cadenceId: 12356, \n    cadenceName: 'General Outreach',\n    priority: 'low'\n  }\n};\n\n// Get the lead source\nconst leadSource = lead.Lead_Source_Most_Recent__c;\n\n// Find matching cadence or use default\nlet selectedCadence = leadSourceToCadence[leadSource] || leadSourceToCadence['Other'];\n\n// Check if lead is already in SalesLoft (you might have a custom field for this)\nconst isInSalesLoft = lead.SalesLoft_Person_ID__c ? true : false;\n\n// Prepare SalesLoft person data\nconst salesloftPerson = {\n  email_address: lead.Email,\n  first_name: lead.FirstName || '',\n  last_name: lead.LastName || '',\n  title: lead.Title || '',\n  phone: lead.Phone || '',\n  company_name: lead.Company || '',\n  lead_source: leadSource,\n  salesforce_lead_id: lead.Id,\n  // Add any custom fields you want to sync\n  custom_fields: {\n    salesforce_rating: lead.Rating || '',\n    salesforce_status: lead.Status || '',\n    lead_created_date: lead.CreatedDate\n  }\n};\n\n// Determine if we should add to cadence\n// Skip if already in SalesLoft and this is not a new lead\nconst shouldAddToCadence = !isInSalesLoft || \n  (new Date() - new Date(lead.CreatedDate)) < 24 * 60 * 60 * 1000; // Less than 24 hours old\n\nreturn {\n  lead: {\n    id: lead.Id,\n    name: `${lead.FirstName} ${lead.LastName}`,\n    email: lead.Email,\n    company: lead.Company,\n    leadSource: leadSource\n  },\n  cadence: selectedCadence,\n  person: salesloftPerson,\n  shouldAddToCadence: shouldAddToCadence,\n  isUpdate: isInSalesLoft\n};"
      },
      "id": "3",
      "name": "Map Lead Source to Cadence",
      "type": "nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salesloft.com/v2/people.json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.person) }}",
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": true
            }
          },
          "response": {
            "response": {
              "fullResponse": false
            }
          }
        }
      },
      "id": "4",
      "name": "Create/Update in SalesLoft",
      "type": "nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "2",
          "name": "SalesLoft API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.shouldAddToCadence }}",
              "value2": true
            }
          ]
        }
      },
      "id": "5",
      "name": "Should Add to Cadence?",
      "type": "nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.salesloft.com/v2/cadence_memberships.json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"person_id\": {{ $node[\"Create/Update in SalesLoft\"].json.data.id }},\n  \"cadence_id\": {{ $node[\"Map Lead Source to Cadence\"].json.cadence.cadenceId }}\n}",
        "options": {}
      },
      "id": "6",
      "name": "Add to Cadence",
      "type": "nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1250, 280],
      "credentials": {
        "httpHeaderAuth": {
          "id": "2",
          "name": "SalesLoft API"
        }
      }
    },
    {
      "parameters": {
        "resource": "lead",
        "operation": "update",
        "leadId": "={{ $node[\"Map Lead Source to Cadence\"].json.lead.id }}",
        "updateFields": {
          "SalesLoft_Person_ID__c": "={{ $node[\"Create/Update in SalesLoft\"].json.data.id }}",
          "SalesLoft_Cadence__c": "={{ $node[\"Map Lead Source to Cadence\"].json.cadence.cadenceName }}",
          "SalesLoft_Sync_Date__c": "={{ $now.format('yyyy-MM-dd HH:mm:ss') }}",
          "SalesLoft_Sync_Status__c": "Synced"
        }
      },
      "id": "7",
      "name": "Update Salesforce Lead",
      "type": "nodes-base.salesforce",
      "typeVersion": 1,
      "position": [1450, 300],
      "credentials": {
        "salesforceOAuth2Api": {
          "id": "1",
          "name": "Salesforce OAuth2"
        }
      }
    },
    {
      "parameters": {},
      "id": "8",
      "name": "Skip Adding to Cadence",
      "type": "nodes-base.noOp",
      "typeVersion": 1,
      "position": [1250, 400]
    },
    {
      "parameters": {
        "jsCode": "// Summary of processed leads\nconst items = $input.all();\n\nconst summary = {\n  totalProcessed: items.length,\n  addedToCadence: items.filter(item => item.json.shouldAddToCadence).length,\n  updated: items.filter(item => item.json.isUpdate).length,\n  byLeadSource: {},\n  byCadence: {}\n};\n\n// Count by lead source and cadence\nitems.forEach(item => {\n  const leadSource = item.json.lead.leadSource;\n  const cadenceName = item.json.cadence.cadenceName;\n  \n  summary.byLeadSource[leadSource] = (summary.byLeadSource[leadSource] || 0) + 1;\n  summary.byCadence[cadenceName] = (summary.byCadence[cadenceName] || 0) + 1;\n});\n\nreturn summary;"
      },
      "id": "9",
      "name": "Generate Summary",
      "type": "nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "channel": "#sales-ops",
        "text": "=ðŸ“Š SalesLoft Sync Complete\\n\\n*Total Leads Processed:* {{ $json.totalProcessed }}\\n*Added to Cadence:* {{ $json.addedToCadence }}\\n*Updated:* {{ $json.updated }}\\n\\n*By Lead Source:*\\n{{ Object.entries($json.byLeadSource).map(([source, count]) => `â€¢ ${source}: ${count}`).join('\\n') }}\\n\\n*By Cadence:*\\n{{ Object.entries($json.byCadence).map(([cadence, count]) => `â€¢ ${cadence}: ${count}`).join('\\n') }}",
        "authentication": "accessToken",
        "otherOptions": {}
      },
      "id": "10",
      "name": "Notify Completion",
      "type": "nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1850, 300],
      "credentials": {
        "slackApi": {
          "id": "3",
          "name": "Slack"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 1
            }
          ]
        }
      },
      "id": "11",
      "name": "Schedule",
      "type": "nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [50, 300]
    }
  ],
  "connections": {
    "Schedule": {
      "main": [
        [
          {
            "node": "Get My Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get My Leads": {
      "main": [
        [
          {
            "node": "Process Each Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Each Lead": {
      "main": [
        [
          {
            "node": "Map Lead Source to Cadence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map Lead Source to Cadence": {
      "main": [
        [
          {
            "node": "Create/Update in SalesLoft",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create/Update in SalesLoft": {
      "main": [
        [
          {
            "node": "Should Add to Cadence?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Add to Cadence?": {
      "main": [
        [
          {
            "node": "Add to Cadence",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Skip Adding to Cadence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Cadence": {
      "main": [
        [
          {
            "node": "Update Salesforce Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Skip Adding to Cadence": {
      "main": [
        [
          {
            "node": "Update Salesforce Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Salesforce Lead": {
      "main": [
        [
          {
            "node": "Process Each Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Each Lead": {
      "main": [
        [
          {
            "node": "Map Lead Source to Cadence",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Summary": {
      "main": [
        [
          {
            "node": "Notify Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": ""
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-30T10:00:00.000Z",
  "versionId": "1"
}